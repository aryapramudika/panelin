name: Build and Release

on:
  push:
    tags:
      - 'v*'
      - 'latest'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set release name
      run: |
        if [[ ${{ github.ref }} == refs/tags/latest ]]; then
          echo "RELEASE_NAME=Latest Release" >> $GITHUB_ENV
        else
          echo "RELEASE_NAME=Release ${{ github.ref_name }}" >> $GITHUB_ENV
        fi

    - name: Build Panelin package
      run: |
        # Your build steps here
        tar -czf panelin.tar.gz panelin panel/
        
    - name: Generate hash
      run: |
        sha256sum panelin.tar.gz > panelin.tar.gz.sha256
        
    - name: Check if release exists
      id: check_release
      run: |
        RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
          | jq -r '.id')
        if [[ $RELEASE_ID == "null" ]]; then
          echo "::set-output name=exists::false"
        else
          echo "::set-output name=exists::true"
          echo "::set-output name=id::$RELEASE_ID"
        fi

    - name: Create Release
      id: create_release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: false

    - name: Update Release
      if: steps.check_release.outputs.exists == 'true'
      run: |
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.id }}" \
          -d '{"name":"${{ env.RELEASE_NAME }}","body":"Updated release for ${{ github.ref_name }}"}'

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url || format('https://uploads.github.com/repos/{0}/releases/{1}/assets{{?name,label}}', github.repository, steps.check_release.outputs.id) }}
        asset_path: ./panelin.tar.gz
        asset_name: panelin.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Hash
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url || format('https://uploads.github.com/repos/{0}/releases/{1}/assets{{?name,label}}', github.repository, steps.check_release.outputs.id) }}
        asset_path: ./panelin.tar.gz.sha256
        asset_name: panelin.tar.gz.sha256
        asset_content_type: text/plain

    - name: Update 'latest' tag
      if: github.ref != 'refs/tags/latest'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -fa latest -m "Update latest tag"
        git push -f origin latest